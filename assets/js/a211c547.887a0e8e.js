"use strict";(self.webpackChunkdocu_scilla=self.webpackChunkdocu_scilla||[]).push([[2625],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return u}});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=t.createContext({}),l=function(e){var n=t.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=l(e.components);return t.createElement(p.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},w=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),w=l(r),u=o,d=w["".concat(p,".").concat(u)]||w[u]||h[u]||a;return r?t.createElement(d,i(i({ref:n},c),{},{components:r})):t.createElement(d,i({ref:n},c))}));function u(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=w;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}w.displayName="MDXCreateElement"},8800:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return s},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return c},default:function(){return w}});var t=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],s={tags:["ownership"]},p="Pattern (ownership)",l={unversionedId:"recipes/scilla-recipes/pattern_ownership",id:"recipes/scilla-recipes/pattern_ownership",isDocsHomePage:!1,title:"Pattern (ownership)",description:"If your contract has an owner it typically means that address has admin powers meaning they have the privilege to adding/remove critical data or pause/unpause the contract.",source:"@site/docs/recipes/scilla-recipes/pattern_ownership.md",sourceDirName:"recipes/scilla-recipes",slug:"/recipes/scilla-recipes/pattern_ownership",permalink:"/Scilla-Cookbook-1/recipes/scilla-recipes/pattern_ownership",editUrl:"https://github.com/Zilliqa/Scilla-Cookbook/tree/master/docs/recipes/scilla-recipes/pattern_ownership.md",tags:[{label:"ownership",permalink:"/Scilla-Cookbook-1/tags/ownership"}],version:"current",frontMatter:{tags:["ownership"]},sidebar:"tutorialSidebar",previous:{title:"Pair",permalink:"/Scilla-Cookbook-1/recipes/scilla-recipes/pair"},next:{title:"Pattern (pause)",permalink:"/Scilla-Cookbook-1/recipes/scilla-recipes/pattern_pause"}},c=[{value:"Transferring ownership",id:"transferring-ownership",children:[]},{value:"Further reading",id:"further-reading",children:[]}],h={toc:c};function w(e){var n=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,t.Z)({},h,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pattern-ownership"},"Pattern (ownership)"),(0,a.kt)("p",null,"If your contract has an owner it typically means that address has admin powers meaning they have the privilege to adding/remove critical data or pause/unpause the contract."),(0,a.kt)("p",null,"It's important to keep your address keys safe, but if for any reason a ",(0,a.kt)("inlineCode",{parentName:"p"},"contract_owner")," needs changing, there needs to be transitions pre-baked into your contract to handle this case."),(0,a.kt)("h2",{id:"transferring-ownership"},"Transferring ownership"),(0,a.kt)("p",null,"Note the below example. The ",(0,a.kt)("inlineCode",{parentName:"p"},"owner")," field is initially set to ",(0,a.kt)("inlineCode",{parentName:"p"},"owner_at_deployment"),", but can then be changed at a later date. You should consider an ownership pattern when writing contracts."),(0,a.kt)("p",null,"It shows three ways of how to change the owner of the contract:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"transition ChangeOwner(new_owner : ByStr20)")),(0,a.kt)("p",null,"ChangeOwner allows anybody to change contract_owner to any address, which is dangerous"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"transition ChangeOwnerByOwnerOnly(new_owner : ByStr20)")),(0,a.kt)("p",null,"Here only the owner can change the ownership. This is better, yet still problematic as the new_owner might be wrong (a typo is enough), and thus the contract will have either a wrong owner, or even worse a non-existing owner."),(0,a.kt)("p",null,"The suggested way of transferring ownership, see Scilla Documentation -- use this in practice.\nThe current owner proposes (stages) a new owner"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"transition RequestOwnershipTransfer(new_owner : ByStr20)")),(0,a.kt)("p",null,"The proposed new owner accepts the ownership"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"transition ConfirmOwnershipTransfer()")),(0,a.kt)("p",null,"This allows a recall of ownership in the case the address was mistyped."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ocaml"},'scilla_version 0\n\ncontract Ownership\n(owner_at_deployment: ByStr20) (* immutable *)\n\n(* mutable fields declarations *)\nfield owner : ByStr20 = owner_at_deployment (* the current owner *)\nfield pending_owner: Option ByStr20 = None {ByStr20} (* a new owner has been proposed *)\n\n(* the safe way of tranfering owner ship: current owner proposes a new owner    *)\n(* and the new onwer collects/accpets the owner ship                            *)\ntransition RequestOwnershipTransfer(new_owner : ByStr20)\n  current <- owner;\n  is_owner = builtin eq _origin current;\n  match is_owner with\n  | False => (* do not accept proposal as _origin is not current owner *)\n    ev = {_eventname: "RequestOwnershipTransferFailureSameOwner"};\n    event ev\n  | True =>\n    proposed = Some {ByStr20} new_owner;\n    pending_owner := proposed;\n    ev = {_eventname: "RequestOwnershipTransferSuccess"};\n    event ev\n  end\nend\n\ntransition ConfirmOwnershipTransfer()\n  proposed_option <- pending_owner;\n  match proposed_option with\n  | None => (* ownership transfer is not in-progress, do nothing *)\n    ev = {_eventname: "ConfirmOwnershipTransferFailureNoProposedNewOwner"};\n    event ev\n  | Some proposed_owner =>\n    caller_is_new_owner = builtin eq _origin proposed_owner;\n    match caller_is_new_owner with\n    | False => (* the caller is not the new owner, do nothing *)\n      ev = {_eventname: "ConfirmOwnershipTransferFailureNotCalledByProposedNewOwner"};\n      event ev\n    | True => (* transfer ownership *)\n      owner := proposed_owner;\n      none = None {ByStr20};\n      pending_owner := none;\n      ev = {_eventname: "ConfirmOwnershipTransferSuccess"};\n      event ev\n    end\n  end\nend\n\n')),(0,a.kt)("h2",{id:"further-reading"},"Further reading"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://scilla.readthedocs.io/en/latest/scilla-tips-and-tricks.html?highlight=ownership#transfer-contract-ownership-1"},"Scilla Documentation - Ownership")),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/TheDrBee/oSCILLAtor/blob/079f2400cfa1e6fdc7a7b0449bd65406186a1f3e/contracts/Ownership.scilla"},"Ownership.Scilla")))}w.isMDXComponent=!0}}]);