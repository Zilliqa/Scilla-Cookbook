"use strict";(self.webpackChunkdocu_scilla=self.webpackChunkdocu_scilla||[]).push([[5204],{3905:function(t,n,e){e.d(n,{Zo:function(){return u},kt:function(){return m}});var r=e(7294);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function o(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function i(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?o(Object(e),!0).forEach((function(n){a(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):o(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function c(t,n){if(null==t)return{};var e,r,a=function(t,n){if(null==t)return{};var e,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var l=r.createContext({}),s=function(t){var n=r.useContext(l),e=n;return t&&(e="function"==typeof t?t(n):i(i({},n),t)),e},u=function(t){var n=s(t.components);return r.createElement(l.Provider,{value:n},t.children)},p={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(t,n){var e=t.components,a=t.mdxType,o=t.originalType,l=t.parentName,u=c(t,["components","mdxType","originalType","parentName"]),d=s(e),m=a,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return e?r.createElement(f,i(i({ref:n},u),{},{components:e})):r.createElement(f,i({ref:n},u))}));function m(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var o=e.length,i=new Array(o);i[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=t,c.mdxType="string"==typeof t?t:a,i[1]=c;for(var s=2;s<o;s++)i[s]=e[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,e)}d.displayName="MDXCreateElement"},3663:function(t,n,e){e.r(n),e.d(n,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=e(7462),a=e(3366),o=(e(7294),e(3905)),i=["components"],c={sidebar_position:3},l="Calling a Contracts Transition",s={unversionedId:"tutorials/interaction-tutorials/incrementing-button-interaction/call-contract",id:"tutorials/interaction-tutorials/incrementing-button-interaction/call-contract",isDocsHomePage:!1,title:"Calling a Contracts Transition",description:"Review the javascript that defines callContract.js",source:"@site/docs/tutorials/interaction-tutorials/incrementing-button-interaction/call-contract.md",sourceDirName:"tutorials/interaction-tutorials/incrementing-button-interaction",slug:"/tutorials/interaction-tutorials/incrementing-button-interaction/call-contract",permalink:"/tutorials/interaction-tutorials/incrementing-button-interaction/call-contract",editUrl:"https://github.com/Zilliqa/Scilla-Cookbook/tree/master/docs/tutorials/interaction-tutorials/incrementing-button-interaction/call-contract.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Deploy Contract",permalink:"/tutorials/interaction-tutorials/incrementing-button-interaction/deploy-contract"},next:{title:"Contract State",permalink:"/tutorials/interaction-tutorials/incrementing-button-interaction/fetch-state"}},u=[{value:"Calling a Transition",id:"calling-a-transition",children:[]}],p={toc:u};function d(t){var n=t.components,e=(0,a.Z)(t,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,e,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"calling-a-contracts-transition"},"Calling a Contracts Transition"),(0,o.kt)("p",null,"Review the javascript that defines ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/Zilliqa-JavaScript-Library-Examples/blob/master/node/callContract.js"},"callContract.js")),(0,o.kt)("h2",{id:"calling-a-transition"},"Calling a Transition"),(0,o.kt)("p",null,"In the below snippet, we begin to define an async function that will call our public transition for pushing the button. We now define a call to the previously defined contract transition with any associated vnames parameters. The below example shows a call to the ",(0,o.kt)("inlineCode",{parentName:"p"},"HelloWorld")," contract's transition ",(0,o.kt)("inlineCode",{parentName:"p"},"setHello"),"."),(0,o.kt)("p",null,"Our example transition name is ",(0,o.kt)("inlineCode",{parentName:"p"},"PressTheButton")," that takes no additional vnames so we can omit the collection of vnames."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:"{11,12,13}","{11,12,13}":!0},"// Calls the previously deployed contract transition\nasync function PressTheButton(bech_32_bystr) {\n  try {\n    const balance = await zilliqa.blockchain.getBalance(address_from_pk);\n    const minGasPrice = await zilliqa.blockchain.getMinimumGasPrice();\n    const myGasPrice = units.toQa('2000', units.Units.Li); \n    const isGasSufficient = myGasPrice.gte(new BN(minGasPrice.result)); \n    const deployedContract = zilliqa.contracts.at(bech_32_bystr,);\n\n    console.log(`Pressing the button...`);\n    const callTx = await deployedContract.callWithoutConfirm(\n        'PressTheButton', // transition name\n        [],               // no params required\n        {\n        version: VERSION,\n        amount: new BN(0), \n        gasPrice: myGasPrice, \n        gasLimit: Long.fromNumber(8000), \n        },\n        false,\n    );\n\n    console.log(`Waiting transaction be confirmed`);\n    const confirmedTxn = await callTx.confirm(callTx.id);\n\n    //console.log(`The transaction status is:`);\n    //console.log(confirmedTxn.receipt);\n    if (confirmedTxn.receipt.success === true) \n    {\n      console.log(`Button pressed by : ${address_from_pk}`);\n    }\n  } \n  catch (err) \n  {\n    console.log(err);\n  }\n}\n")),(0,o.kt)("p",null,"We then add this call method to our start point to then call the transition from the newly deployed contract. Using ",(0,o.kt)("inlineCode",{parentName:"p"},"Promise.all")," we can ensure that ",(0,o.kt)("inlineCode",{parentName:"p"},"PressTheButton")," processes after ",(0,o.kt)("inlineCode",{parentName:"p"},"DeployButtonContract")," so we have the ",(0,o.kt)("inlineCode",{parentName:"p"},"deployed_contract_base_16")," variable defined."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// Application Definition\n// DEPLOY a contract, \n// SEND a transaction\n// LISTEN to events emitted\n// MONITOR mutable state \nasync function DeploySendListenMonitor()\n{\n    deployed_contract_base_16 = await DeployButtonContract();\n    bech_32_bystr = toBech32Address(deployed_contract_base_16);\n    console.log(`got ${bech_32_bystr} from ${deployed_contract_base_16}`)\n\n    await Promise.all([\n        PressTheButton(bech_32_bystr)\n    ]);\n}\n")),(0,o.kt)("p",null,"The console, after waiting for the async call to be returned should reply with. If we examined the contract state, our counter would have increased since we had a successful transaction with no errors thrown."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"...\nPressing the button...\nWaiting transaction be confirmed\nButton pressed by : 0x428A2aA43456FE7fd2De66E48C1fBf372eC10eAE\n")))}d.isMDXComponent=!0}}]);