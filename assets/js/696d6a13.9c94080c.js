"use strict";(self.webpackChunkdocu_scilla=self.webpackChunkdocu_scilla||[]).push([[3660],{9074:function(e){e.exports=JSON.parse('{"name":"pattern","permalink":"/Scilla-Cookbook-1/tags/pattern","docs":[{"id":"recipes/scilla-recipes/pattern_pause","title":"Pattern (pause)","description":"Once a smart contract has been deployed to the network it becomes immutable. Let\'s consider some usecases where pauses become useful to implement in your smart contract design.","permalink":"/Scilla-Cookbook-1/recipes/scilla-recipes/pattern_pause"},{"id":"recipes/scilla-recipes/pattern_proxy","title":"Pattern (proxy)","description":"Proxy patterns allows developers to adapt to a changing environment and to react to bugs and other errors. To overcome the limitations introduced by the immutability of contract code, a contract can be split up into modules, which are then virtually upgradeable.","permalink":"/Scilla-Cookbook-1/recipes/scilla-recipes/pattern_proxy"},{"id":"recipes/scilla-recipes/pattern_view","title":"Pattern (viewer)","description":"The viewer pattern is a standardised way of implementing functions that return a value without using callbacks.","permalink":"/Scilla-Cookbook-1/recipes/scilla-recipes/pattern_view"}],"allTagsPath":"/Scilla-Cookbook-1/tags"}')}}]);