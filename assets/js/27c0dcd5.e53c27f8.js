"use strict";(self.webpackChunkdocu_scilla=self.webpackChunkdocu_scilla||[]).push([[2250],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=u(n),f=a,d=m["".concat(l,".").concat(f)]||m[f]||p[f]||o;return n?r.createElement(d,i(i({ref:t},s),{},{components:n})):r.createElement(d,i({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2826:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return s},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],c={tags:["natural","nat","peano"]},l="Natural Numbers",u={unversionedId:"recipes/scilla-contract/natural",id:"recipes/scilla-contract/natural",isDocsHomePage:!1,title:"Natural Numbers",description:"NAT types are natural numbers. You can start at 0 using,",source:"@site/docs/recipes/scilla-contract/natural.md",sourceDirName:"recipes/scilla-contract",slug:"/recipes/scilla-contract/natural",permalink:"/recipes/scilla-contract/natural",editUrl:"https://github.com/Zilliqa/Scilla-Cookbook/tree/master/docs/recipes/scilla-contract/natural.md",tags:[{label:"natural",permalink:"/tags/natural"},{label:"nat",permalink:"/tags/nat"},{label:"peano",permalink:"/tags/peano"}],version:"current",frontMatter:{tags:["natural","nat","peano"]},sidebar:"tutorialSidebar",previous:{title:"Muti-signature contracts",permalink:"/recipes/scilla-contract/mutisignature"},next:{title:"Non-Fungible Token (NFT)",permalink:"/recipes/scilla-contract/nonfungible"}},s=[{value:"Further Reading",id:"further-reading",children:[]}],p={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"natural-numbers"},"Natural Numbers"),(0,o.kt)("p",null,"NAT types are natural numbers. You can start at 0 using,"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Zero")),(0,o.kt)("p",null,"and have a way to get the next one, i.e. its successor using,"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Succ")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Nat")," is used as a part of ",(0,o.kt)("a",{parentName:"p",href:"folding"},"folding"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},'scilla_version 0\n(***************************************************)\n(* The built-in ADT "Nat"                          *)\n(***************************************************)\nimport NatUtils\n\ncontract NatType()\n\nfield counter: Nat = Zero\n\n(* emit the current value of the counter in an event *)\nprocedure EmitCounterAsNumber()\n  c <- counter;\n  number = nat_to_int c; (* from NatUtils *)\n  ev = {_eventname : "EmitCounter"; counter_value: number};\n  event ev\nend\n\n(* Increase the counter: get next Peano Number *)\ntransition Increase()\n  c <- counter;\n  next = Succ c;\n  counter := next;\n  EmitCounterAsNumber\nend\n\n(* Decrease the counter: get previous Peano Number    *)\n(* floored at Zero, i.e. there is no previous to Zero *)\ntransition DecreaseFlooredAtZeo()\n  c <- counter;\n  previous_opt = nat_prev c; (* from NatUtils *)\n  previous = let p =\n    match previous_opt with\n    | None => (* counter was Zero, remains at Zero *)\n      Zero\n    | Some x =>\n      x\n    end in (* previous_opt *)\n  p;\n  counter := previous;\n  EmitCounterAsNumber\nend\n')),(0,o.kt)("h2",{id:"further-reading"},"Further Reading"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://wiki.haskell.org/Peano_numbers"},"Haskell Peano Numbers")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/TheDrBee/oSCILLAtor/blob/079f2400cfa1e6fdc7a7b0449bd65406186a1f3e/contracts/NatType.scilla"},"NatType.scilla")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://scilla.readthedocs.io/en/latest/scilla-in-depth.html?highlight=adt#nat"},"readthedocs - Nat")))}m.isMDXComponent=!0}}]);