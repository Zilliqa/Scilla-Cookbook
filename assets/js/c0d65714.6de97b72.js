"use strict";(self.webpackChunkdocu_scilla=self.webpackChunkdocu_scilla||[]).push([[4383],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return b}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(r),b=a,m=d["".concat(i,".").concat(b)]||d[b]||p[b]||l;return r?n.createElement(m,s(s({ref:t},u),{},{components:r})):n.createElement(m,s({ref:t},u))}));function b(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,s=new Array(l);s[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<l;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1746:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var n=r(7462),a=r(3366),l=(r(7294),r(3905)),s=["components"],o={tags:["Address","ByStr20","Bech32","Base16"]},i="Addresses",c={unversionedId:"recipes/scilla-contract/addresses",id:"recipes/scilla-contract/addresses",isDocsHomePage:!1,title:"Addresses",description:"Addresses on the network can either be a wallet or a contract.",source:"@site/docs/recipes/scilla-contract/addresses.md",sourceDirName:"recipes/scilla-contract",slug:"/recipes/scilla-contract/addresses",permalink:"/Scilla-Cookbook/recipes/scilla-contract/addresses",editUrl:"https://github.com/Zilliqa/Scilla-Cookbook/docs/recipes/scilla-contract/addresses.md",tags:[{label:"Address",permalink:"/Scilla-Cookbook/tags/address"},{label:"ByStr20",permalink:"/Scilla-Cookbook/tags/by-str-20"},{label:"Bech32",permalink:"/Scilla-Cookbook/tags/bech-32"},{label:"Base16",permalink:"/Scilla-Cookbook/tags/base-16"}],version:"current",frontMatter:{tags:["Address","ByStr20","Bech32","Base16"]},sidebar:"tutorialSidebar",previous:{title:"Community Scilla Cookbook",permalink:"/Scilla-Cookbook/"},next:{title:"ADT",permalink:"/Scilla-Cookbook/recipes/scilla-contract/adt"}},u=[{value:"ByStr20 Library Functions",id:"bystr20-library-functions",children:[{value:"equalByStr20",id:"equalbystr20",children:[]}]},{value:"Further Reading",id:"further-reading",children:[]}],p={toc:u};function d(e){var t=e.components,r=(0,a.Z)(e,s);return(0,l.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"addresses"},"Addresses"),(0,l.kt)("p",null,"Addresses on the network can either be a wallet or a contract."),(0,l.kt)("p",null,"Addresses come in two notations Bech32 or Base16."),(0,l.kt)("p",null,"Bech32's start with the prefix ",(0,l.kt)("inlineCode",{parentName:"p"},"zil...")," whereas Base16's are prefixed with ",(0,l.kt)("inlineCode",{parentName:"p"},"0x..."),"."),(0,l.kt)("p",null,"Converting a Bech32 into a Base16 and visa versa can be achieved manually though ",(0,l.kt)("inlineCode",{parentName:"p"},"IDE>Tools>AddressConverter")," or programatically using programs like Zilliqa-JS."),(0,l.kt)("p",null,"When we refer to a ByStr20 in Scilla, we refer to the Base16 address."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-text"},"Bech32 = zil1zyg3zyg3zyg3zyg3zyg3zyg3zyg3zyg3h6785s\nBase16 = 0x1111111111111111111111111111111111111111\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ocaml"},"scilla_version 0\n\nlibrary Example\n\nlet constant_bystr = 0x1111111111111111111111111111111111111111\n\ncontract Example\n(\n    immutable_bystr: BNum\n)\n\nfield state_bystr : ByStr20 = constant_bystr\n")),(0,l.kt)("h2",{id:"bystr20-library-functions"},"ByStr20 Library Functions"),(0,l.kt)("h3",{id:"equalbystr20"},"equalByStr20"),(0,l.kt)("p",null,"equalByStr20 is a library function that takes two addresses and returns ",(0,l.kt)("inlineCode",{parentName:"p"},"True")," from ",(0,l.kt)("inlineCode",{parentName:"p"},"builtin eq")," if the addresses are equal."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ocaml"},"let eqByStr20 =\n  fun(bs1: ByStr20) =>\n  fun(bs2: ByStr20) =>\n    builtin eq bs1 bs2\n")),(0,l.kt)("h2",{id:"further-reading"},"Further Reading"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://scilla.readthedocs.io/en/latest/scilla-in-depth.html?highlight=bystr20#addresses"},"readthedocs - Addresses")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/scilla/blob/master/tests/contracts/auction.scilla"},"auction.scilla")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/zli/blob/c35fbac35edb5c6987b8a5881490a7cacb4cb1be/testsuite/contracts/UnstoppableDomains/Registry.scilla"},"unstoppabledomains_registry.scilla")))}d.isMDXComponent=!0}}]);