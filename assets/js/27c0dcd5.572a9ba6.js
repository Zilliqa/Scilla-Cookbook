"use strict";(self.webpackChunkdocu_scilla=self.webpackChunkdocu_scilla||[]).push([[2250],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),l=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=l(e.components);return r.createElement(u.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=l(t),f=a,d=m["".concat(u,".").concat(f)]||m[f]||p[f]||o;return t?r.createElement(d,i(i({ref:n},s),{},{components:t})):r.createElement(d,i({ref:n},s))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=m;var c={};for(var u in n)hasOwnProperty.call(n,u)&&(c[u]=n[u]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2826:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return l},toc:function(){return s},default:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],c={tags:["natural","nat","peano"]},u="Natural Numbers",l={unversionedId:"recipes/scilla-contract/natural",id:"recipes/scilla-contract/natural",isDocsHomePage:!1,title:"Natural Numbers",description:"NAT types are just natural numbers. You can start at 0 using,",source:"@site/docs/recipes/scilla-contract/natural.md",sourceDirName:"recipes/scilla-contract",slug:"/recipes/scilla-contract/natural",permalink:"/recipes/scilla-contract/natural",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/recipes/scilla-contract/natural.md",tags:[{label:"natural",permalink:"/tags/natural"},{label:"nat",permalink:"/tags/nat"},{label:"peano",permalink:"/tags/peano"}],version:"current",frontMatter:{tags:["natural","nat","peano"]},sidebar:"tutorialSidebar",previous:{title:"Muti-signature contracts",permalink:"/recipes/scilla-contract/mutisignature"},next:{title:"Non-Fungible Token (NFT)",permalink:"/recipes/scilla-contract/nonfungible"}},s=[{value:"Further Reading",id:"further-reading",children:[]}],p={toc:s};function m(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"natural-numbers"},"Natural Numbers"),(0,o.kt)("p",null,"NAT types are just natural numbers. You can start at 0 using,"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Zero")),(0,o.kt)("p",null,"and have a way to get the next one, i.e. its successor using,"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Succ")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Nat")," is used as a part of ",(0,o.kt)("a",{parentName:"p",href:"folding"},"folding"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ocaml"},'scilla_version 0\n(***************************************************)\n(* The built-in ADT "Nat"                          *)\n(***************************************************)\nimport NatUtils\n\ncontract NatType()\n\nfield counter: Nat = Zero\n\n(* emit the current value of the counter in an event *)\nprocedure EmitCounterAsNumber()\n  c <- counter;\n  number = nat_to_int c; (* from NatUtils *)\n  ev = {_eventname : "EmitCounter"; counter_value: number};\n  event ev\nend\n\n(* Increase the counter: get next Peano Number *)\ntransition Increase()\n  c <- counter;\n  next = Succ c;\n  counter := next;\n  EmitCounterAsNumber\nend\n\n(* Decrease the counter: get previous Peano Number    *)\n(* floored at Zero, i.e. there is no previous to Zero *)\ntransition DecreaseFlooredAtZeo()\n  c <- counter;\n  previous_opt = nat_prev c; (* from NatUtils *)\n  previous = let p =\n    match previous_opt with\n    | None => (* counter was Zero, remains at Zero *)\n      Zero\n    | Some x =>\n      x\n    end in (* previous_opt *)\n  p;\n  counter := previous;\n  EmitCounterAsNumber\nend\n')),(0,o.kt)("h2",{id:"further-reading"},"Further Reading"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://wiki.haskell.org/Peano_numbers"},"Haskell Peano Numbers")))}m.isMDXComponent=!0}}]);