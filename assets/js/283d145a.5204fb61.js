"use strict";(self.webpackChunkdocu_scilla=self.webpackChunkdocu_scilla||[]).push([[2892],{3905:function(t,e,n){n.d(e,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function c(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?c(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},c=Object.keys(t);for(a=0;a<c.length;a++)n=c[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(a=0;a<c.length;a++)n=c[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=a.createContext({}),s=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},p=function(t){var e=s(t.components);return a.createElement(l.Provider,{value:e},t.children)},u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,c=t.originalType,l=t.parentName,p=i(t,["components","mdxType","originalType","parentName"]),m=s(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||u[d]||c;return n?a.createElement(h,o(o({ref:e},p),{},{components:n})):a.createElement(h,o({ref:e},p))}));function d(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var c=n.length,o=new Array(c);o[0]=m;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:r,o[1]=i;for(var s=2;s<c;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6286:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var a=n(7462),r=n(3366),c=(n(7294),n(3905)),o=["components"],i={tags:["contract","call","another"]},l="Contract to Contract interaction",s={unversionedId:"recipes/scilla-contract/contracttocontract",id:"recipes/scilla-contract/contracttocontract",isDocsHomePage:!1,title:"Contract to Contract interaction",description:"Contract",source:"@site/docs/recipes/scilla-contract/contracttocontract.md",sourceDirName:"recipes/scilla-contract",slug:"/recipes/scilla-contract/contracttocontract",permalink:"/recipes/scilla-contract/contracttocontract",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/recipes/scilla-contract/contracttocontract.md",tags:[{label:"contract",permalink:"/tags/contract"},{label:"call",permalink:"/tags/call"},{label:"another",permalink:"/tags/another"}],version:"current",frontMatter:{tags:["contract","call","another"]},sidebar:"tutorialSidebar",previous:{title:"BNum",permalink:"/recipes/scilla-contract/bnum"},next:{title:"Keywords",permalink:"/recipes/scilla-contract/keywords"}},p=[{value:"Contract",id:"contract",children:[]},{value:"Calling a contract with parameters",id:"calling-a-contract-with-parameters",children:[]}],u={toc:p};function m(t){var e=t.components,n=(0,r.Z)(t,o);return(0,c.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"contract-to-contract-interaction"},"Contract to Contract interaction"),(0,c.kt)("h2",{id:"contract"},"Contract"),(0,c.kt)("p",null,"Developers may wish to call another contract to perform a specific action. This page details the way this can be achieved."),(0,c.kt)("p",null,"Let's assume we have a ",(0,c.kt)("a",{parentName:"p",href:"/tutorials/scilla-contract/incrementing-button/basics-introduction"},"button contract"),". The button contract allows addresses to interact and press the button. In this example we write a contract that interacts with the button contract called ",(0,c.kt)("inlineCode",{parentName:"p"},"CallerContract")),(0,c.kt)("p",null,"Firstly, we need the name of the transition and shape of the parameters we are trying to call. In our case the transition name is ",(0,c.kt)("inlineCode",{parentName:"p"},"PressTheButton")," with no arguments."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ocaml"},"transition PressTheButton()\nend\n")),(0,c.kt)("p",null,"Our contract so far defines a transition called ProxyPressButton, that takes a ByStr20 as an argument. When this transition is called, a call object is created called ",(0,c.kt)("inlineCode",{parentName:"p"},"button_contract_call"),". A call object takes three manditory arguments called ",(0,c.kt)("inlineCode",{parentName:"p"},"_tag"),", ",(0,c.kt)("inlineCode",{parentName:"p"},"_recipient")," and ",(0,c.kt)("inlineCode",{parentName:"p"},"_amount"),". These relate to the transition name, contract address and ZIL amount in QA respectively. In our case the _tag will be ",(0,c.kt)("inlineCode",{parentName:"p"},"PressTheButton"),", the _recipient will be the variable we pass ",(0,c.kt)("inlineCode",{parentName:"p"},"button_contract_address")," and the _amount we are sending is ",(0,c.kt)("inlineCode",{parentName:"p"},"Uint128 0")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ocaml"},'let one_msg = \n  fun (msg : Message) => \n  let nil_msg = Nil {Message} in\n    Cons {Message} msg nil_msg\n...\ncontract CallerContract()\n...\ntransition ProxyPressButton(button_contract_address: ByStr20)\n    button_contract_call = {\n        _tag: "PressTheButton";\n        _recipient: button_contract_address;\n        _amount: Uint128 0;\n    };\n    msgs = one_msg button_contract_call;\n    send msgs\nend\n')),(0,c.kt)("p",null,"There are three addresses being interacted with in this example. The address we are sending the transaction from is calling the proxy, which is calling the button. The button contract when inspecting the ",(0,c.kt)("inlineCode",{parentName:"p"},"_sender")," variable will see the ",(0,c.kt)("inlineCode",{parentName:"p"},"CallerContract")," proxy calling."),(0,c.kt)("h2",{id:"calling-a-contract-with-parameters"},"Calling a contract with parameters"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ocaml"},"transition ExampleWithParams(int_value: Uint256, bystr_value: ByStr20)\nend\n")),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre",className:"language-ocaml"},'transition ProxyPressButton(example_contract_address: ByStr20)\n    i_value = Uint256 44;\n    b_value = example_contract_address\n    example_contract_call = {\n        _tag: "ExampleWithParams";\n        _recipient: example_contract_address;\n        _amount: Uint128 0;\n        int_value: i_value;\n        bystr_value: b_value;\n    };\n    msgs = one_msg example_contract_call;\n    send msgs\nend\n\n')))}m.isMDXComponent=!0}}]);