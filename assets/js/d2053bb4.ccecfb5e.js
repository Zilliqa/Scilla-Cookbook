"use strict";(self.webpackChunkdocu_scilla=self.webpackChunkdocu_scilla||[]).push([[6140],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(f,c(c({ref:t},p),{},{components:n})):r.createElement(f,c({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,c=new Array(i);c[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,c[1]=o;for(var s=2;s<i;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3702:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),c=["components"],o={tags:["IDE","Interaction","call","type"]},l="IDE Interaction",s={unversionedId:"recipes/contract-interaction/ide-adt",id:"recipes/contract-interaction/ide-adt",isDocsHomePage:!1,title:"IDE Interaction",description:"Developers may want to deploy contracts through the IDE for testing which require complex types or interaction. This page specifies the untypical interactions developers may have with the IDE",source:"@site/docs/recipes/contract-interaction/ide-adt.md",sourceDirName:"recipes/contract-interaction",slug:"/recipes/contract-interaction/ide-adt",permalink:"/recipes/contract-interaction/ide-adt",editUrl:"https://github.com/Zilliqa/Scilla-Cookbook/tree/master/docs/recipes/contract-interaction/ide-adt.md",tags:[{label:"IDE",permalink:"/tags/ide"},{label:"Interaction",permalink:"/tags/interaction"},{label:"call",permalink:"/tags/call"},{label:"type",permalink:"/tags/type"}],version:"current",frontMatter:{tags:["IDE","Interaction","call","type"]},sidebar:"tutorialSidebar",previous:{title:"Zilliqa-JS Quickstart",permalink:"/recipes/contract-interaction/zilliqa-js-quickstart"},next:{title:"Zilliqa-go SDK",permalink:"/recipes/contract-interaction/zilliqa-go-quickstart"}},p=[{value:"Contract Immutable ADT&#39;s",id:"contract-immutable-adts",children:[{value:"List",id:"list",children:[]},{value:"Pair",id:"pair",children:[]}]}],u={toc:p};function m(e){var t=e.components,n=(0,a.Z)(e,c);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ide-interaction"},"IDE Interaction"),(0,i.kt)("p",null,"Developers may want to deploy contracts through the IDE for testing which require complex types or interaction. This page specifies the untypical interactions developers may have with the IDE"),(0,i.kt)("h2",{id:"contract-immutable-adts"},"Contract Immutable ADT's"),(0,i.kt)("h3",{id:"list"},"List"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml"},"transition Test(input: List Uint256)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'["1","2","3"]\n')),(0,i.kt)("h3",{id:"pair"},"Pair"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml"},"transition Test(input: List (Pair ByStr20 Uint256))\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[{\n  "constructor":"Pair",\n  "argtypes": [\n      "ByStr20",\n      "Uint256"\n    ],\n    "arguments": [\n      "0x0496a854570f27687B6f401d5e209fD14c3F3061",\n      "5"\n    ]\n}]```\n')))}m.isMDXComponent=!0}}]);