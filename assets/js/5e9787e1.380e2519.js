"use strict";(self.webpackChunkdocu_scilla=self.webpackChunkdocu_scilla||[]).push([[1639],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=a,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8585:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={tags:["non","fungible","token","reference","contract","zrc-1"]},c="Non-fungible token",l={unversionedId:"recipes/scilla-recipes/nonfungible",id:"recipes/scilla-recipes/nonfungible",isDocsHomePage:!1,title:"Non-fungible token",description:"A fungible token is unit of currency that can be readily interchanged, it has properties like fiat where 1 unit of currency is equal to 1 unit of the same currency.",source:"@site/docs/recipes/scilla-recipes/nonfungible.md",sourceDirName:"recipes/scilla-recipes",slug:"/recipes/scilla-recipes/nonfungible",permalink:"/recipes/scilla-recipes/nonfungible",editUrl:"https://github.com/Zilliqa/Scilla-Cookbook/tree/master/docs/recipes/scilla-recipes/nonfungible.md",tags:[{label:"non",permalink:"/tags/non"},{label:"fungible",permalink:"/tags/fungible"},{label:"token",permalink:"/tags/token"},{label:"reference",permalink:"/tags/reference"},{label:"contract",permalink:"/tags/contract"},{label:"zrc-1",permalink:"/tags/zrc-1"}],version:"current",frontMatter:{tags:["non","fungible","token","reference","contract","zrc-1"]},sidebar:"tutorialSidebar",previous:{title:"Natural numbers",permalink:"/recipes/scilla-recipes/natural"},next:{title:"Notable contracts",permalink:"/recipes/scilla-recipes/notable-contracts"}},p=[{value:"How does it work?",id:"how-does-it-work",children:[]},{value:"Types of non fungible contracts",id:"types-of-non-fungible-contracts",children:[{value:"ZRC-1",id:"zrc-1",children:[]},{value:"ZRC-6",id:"zrc-6",children:[]}]},{value:"Transferring Nonfungible Tokens",id:"transferring-nonfungible-tokens",children:[{value:"ZRC-7",id:"zrc-7",children:[]}]},{value:"Further reading",id:"further-reading",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"non-fungible-token"},"Non-fungible token"),(0,i.kt)("p",null,"A ",(0,i.kt)("a",{parentName:"p",href:"fungible"},"fungible token")," is unit of currency that can be readily interchanged, it has properties like fiat where 1 unit of currency is equal to 1 unit of the same currency."),(0,i.kt)("p",null,"Non-fungible tokens have associated with it some unique properties like some particular attributes, image, asset and therefore makes each piece unique. The tokens can be thought of as certificates of ownership for virtual or physical assets. A Non-Fungible contract is a collection of associations between token ids, there associated asset and an owning address."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/ZRC/blob/master/zrcs/zrc-1.md"},"ZRC-1")," defines a minimum interface a smart contract must implement to allow unique tokens to be managed, tracked, owned, and traded - it's a simple interface to attach a resource link to a token."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/ZRC/blob/master/zrcs/zrc-6.md"},"ZRC-6")," defines another interface which has features to align itself with some of the patterns ERC-721 and ERC-1155 have such as royalty payments and batch minting."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/ZRC/blob/master/zrcs/zrc-7.md"},"ZRC-7")," defines a metadata standard that developers should follow. The resource attached to a ZRC-1 / ZRC-6 should emit a JSON response which contains not only the image, but the traits and other relevant project and token information which ecosystem partners can then universally consume."),(0,i.kt)("h2",{id:"how-does-it-work"},"How does it work?"),(0,i.kt)("p",null,"The non fungible contract has a state map called ",(0,i.kt)("inlineCode",{parentName:"p"},"token_owners")," which associates an incrementing ",(0,i.kt)("inlineCode",{parentName:"p"},"token_id")," to an address. The token has a concept of a ",(0,i.kt)("inlineCode",{parentName:"p"},"token_uri")," which it associates with the ",(0,i.kt)("inlineCode",{parentName:"p"},"token_id")," this is typically a JSON asset on the internet, ipfs, arweave and could hold any particular file. Only the ",(0,i.kt)("inlineCode",{parentName:"p"},"contract_owner"),' is able to mint, however the contract has a concept of being a "minter" which will allow any particular address the permission to Mint tokens on the ',(0,i.kt)("inlineCode",{parentName:"p"},"contract_owner")," behalf and is a revocable permission."),(0,i.kt)("h2",{id:"types-of-non-fungible-contracts"},"Types of non fungible contracts"),(0,i.kt)("h3",{id:"zrc-1"},"ZRC-1"),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Depreciated. Consider using ZRC-6."))),(0,i.kt)("p",null,"The ZRC-1 contract can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/ZRC/blob/master/reference/zrc1.scilla"},"here")),(0,i.kt)("p",null,"The ZRC-1 specification can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/ZRC/blob/master/zrcs/zrc-1.md"},"here")),(0,i.kt)("h4",{id:"zrc-1-interface"},"ZRC-1 interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml"},"(* @dev:    Add or remove approved minters. Only contract_owner can approve minters. *)\n(* @param:  minter      - Address of the minter to be approved or removed            *)\ntransition ConfigureMinter(minter: ByStr20)\n\n(* @dev:    Mint new tokens. Only minters can mint.           *)\n(* @param:  to        - Address of the token recipient        *)\n(* @param:  token_uri - URI of the the new token to be minted *)\ntransition Mint(to: ByStr20, token_uri: String)\n\n(* @dev:    Mint multiple new tokens at once. Only minters can mint. *)\n(* @param:  to_list         - Addressses of the token recipient      *)\n(* @param:  token_uris_list - URIs of the the new token to be minted *)\ntransition BatchMint(to_list: List ByStr20, token_uris_list: List String)\n\n\n(* @dev:    Burn existing tokens. Only token_owner or an operator can burn a NFT. *)\n(* @param:  token_id - Unique ID of the NFT to be destroyed                       *)\ntransition Burn(token_id: Uint256)\n\n(* @dev: Approves OR remove an address ability to transfer a given token_id *)\n(* There can only be one approved_spender per token at any given time       *)\n(* param: to       - Address to be approved for the given token_id          *)\n(* param: token_id - Unique ID of the NFT to be approved                    *)\ntransition SetApprove(to: ByStr20, token_id: Uint256)\n\n(* @dev: Sets or unsets an operator for the _sender       *)\n(* @param: to - Address to be set or unset as an operator *)\ntransition SetApprovalForAll(to: ByStr20)\n\n(* @dev: Transfer the ownership of a given token_id to another address. token_owner only transition. *)\n(* @param: to       - Recipient address for the token                                                *)\n(* @param: token_id - Unique ID of the NFT to be transferred                                         *)\ntransition Transfer(to: ByStr20, token_id: Uint256)\n\n\n(* @dev: Transfer the ownership of a given token_id to another address. approved_spender or operator only transition. *)\n(* @param: to       - Recipient address for the NFT                                                                   *)\n(* @param: token_id - Unique ID of the NFT to be transferred                                                          *)\ntransition TransferFrom(to: ByStr20, token_id: Uint256)\n")),(0,i.kt)("h3",{id:"zrc-6"},"ZRC-6"),(0,i.kt)("p",null,"The ZRC-6 contract can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/ZRC/blob/master/reference/zrc6.scilla"},"here"),"."),(0,i.kt)("p",null,"The ZRC-6 specification can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/ZRC/blob/master/zrcs/zrc-6.md"},"here"),"."),(0,i.kt)("h4",{id:"zrc-6-interface"},"ZRC-6 interface"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml"},"procedure TransferToken(to: ByStr20, token_id: Uint256)\ntransition Pause()\ntransition Unpause()\ntransition SetRoyaltyRecipient(to: ByStr20)\ntransition SetRoyaltyFeeBPS(fee_bps: Uint128)\ntransition SetBaseURI(uri: String)\ntransition Mint(to: ByStr20)\ntransition BatchMint(to_list: List ByStr20)\ntransition Burn(token_id: Uint256)\ntransition BatchBurn(token_id_list: List Uint256)\ntransition AddMinter(minter: ByStr20)\ntransition RemoveMinter(minter: ByStr20)\ntransition SetSpender(spender: ByStr20, token_id: Uint256)\ntransition AddOperator(operator: ByStr20)\ntransition RemoveOperator(operator: ByStr20)\ntransition TransferFrom(to: ByStr20, token_id: Uint256)\ntransition BatchTransferFrom(to_token_id_pair_list: List (Pair ByStr20 Uint256))\ntransition SetContractOwnershipRecipient(to: ByStr20)\ntransition AcceptContractOwnership()\n")),(0,i.kt)("h2",{id:"transferring-nonfungible-tokens"},"Transferring Nonfungible Tokens"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml"},'type TokenMove = | UserToContract | ContractToUser\n\nprocedure MoveNonFungibleTokenFromContractToUser(token_move: TokenMove, recipient_address: ByStr20, nonfungible: ByStr20, token_id: Uint256)\n  match token_move with\n    | ContractToUser =>\n      transfer_to_user = {\n        _tag: "TransferFrom";\n        _recipient: nonfungible;\n        _amount: uint128_zero;\n        to: recipient_address;\n        token_id: token_id\n        };\n      msgs = one_msg transfer_to_user;\n      send msgs;\n      e = {_eventname : "StoreMovedToUserSuccess"; nonfungible : nonfungible; token_id: token_id};  \n      event e\n      \n    | UserToContract =>\n    end\nend\n')),(0,i.kt)("h3",{id:"zrc-7"},"ZRC-7"),(0,i.kt)("p",null,"The ZRC-7 specification can be found ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/ZRC/blob/master/zrcs/zrc-7.md"},"here"),"."),(0,i.kt)("p",null,"Since ZRC-7 is a metadata standard, there is no related Scilla contract."),(0,i.kt)("h4",{id:"zrc-7-token_uri-example"},"ZRC-7 token_uri example"),(0,i.kt)("p",null,"When querying a ZRC-6 non fungible contract for it's URI data, either at ",(0,i.kt)("inlineCode",{parentName:"p"},"<base_uri><token_id>")," (where base_uri ends with a '/') or ",(0,i.kt)("inlineCode",{parentName:"p"},"token_uri"),". The image is found as a URL on the JSON itself. The below is an example of the data returned when querying either ",(0,i.kt)("inlineCode",{parentName:"p"},"<base_uri><token_id>")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"token_uri"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "name": "Creature #101",\n  "resource": "ipfs://QmZILGa7zXUbixvYJpgkRkaSCYEBtSwgVtfzkoD3YkNsE1",\n  "external_url": "https://example.com/creature",\n  "attributes": [\n    {\n      "trait_type": "Background",\n      "value": "Black"\n    },\n    {\n      "trait_type": "Eyes",\n      "value": "Big"\n    },\n    {\n      "trait_type": "Mouth",\n      "value": "Grin"\n    },\n    {\n      "display_type": "timestamp",\n      "trait_type": "Birthday",\n      "value": 1546360800\n    }\n  ]\n}\n')),(0,i.kt)("h4",{id:"zrc-7-external_url-example"},"ZRC-7 external_url example"),(0,i.kt)("p",null,"Projects can take advantage of the external_url field to store project specific information which is written once for a contract to prevent duplication on token metadata."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'{\n  "name": "Unique and Diverse Creatures",\n  "description": "10,000 unique and diverse creatures living on the blockchain.",\n  "external_url": "https://example.com/creature",\n  "animation_url": "https://animation.example.com/creature"\n}\n')),(0,i.kt)("h2",{id:"further-reading"},"Further reading"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/ZRC/blob/master/zrcs/zrc-1.md"},"ZRC-1 specification")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/ZRC/blob/master/zrcs/zrc-6.md"},"ZRC-6 specification")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/ZRC/blob/master/zrcs/zrc-7.md"},"ZRC-7 specification")))}d.isMDXComponent=!0}}]);