"use strict";(self.webpackChunkdocu_scilla=self.webpackChunkdocu_scilla||[]).push([[8052],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),l=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=l(e.components);return o.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,f=m["".concat(p,".").concat(d)]||m[d]||u[d]||i;return n?o.createElement(f,a(a({ref:t},s),{},{components:n})):o.createElement(f,a({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=m;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var l=2;l<i;l++)a[l]=n[l];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3082:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return p},metadata:function(){return l},toc:function(){return s},default:function(){return m}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],c={tags:["option","optional","some","none"]},p="Option",l={unversionedId:"recipes/scilla-contract/option",id:"recipes/scilla-contract/option",isDocsHomePage:!1,title:"Option",description:"Optional Types",source:"@site/docs/recipes/scilla-contract/option.md",sourceDirName:"recipes/scilla-contract",slug:"/recipes/scilla-contract/option",permalink:"/recipes/scilla-contract/option",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/recipes/scilla-contract/option.md",tags:[{label:"option",permalink:"/tags/option"},{label:"optional",permalink:"/tags/optional"},{label:"some",permalink:"/tags/some"},{label:"none",permalink:"/tags/none"}],version:"current",frontMatter:{tags:["option","optional","some","none"]},sidebar:"tutorialSidebar",previous:{title:"Notable Contracts",permalink:"/recipes/scilla-contract/notable-contracts"},next:{title:"Ownership",permalink:"/recipes/scilla-contract/ownership"}},s=[{value:"Optional Types",id:"optional-types",children:[{value:"Example Contract",id:"example-contract",children:[]}]},{value:"Further Reading",id:"further-reading",children:[]}],u={toc:s};function m(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"option"},"Option"),(0,i.kt)("h2",{id:"optional-types"},"Optional Types"),(0,i.kt)("p",null,"Optional values are specified using the type ",(0,i.kt)("inlineCode",{parentName:"p"},"Option t"),", where ",(0,i.kt)("inlineCode",{parentName:"p"},"t")," is some type. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Option")," ADT has two constructors:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Some")," represents the presence of a value. The Some constructor takes one argument (the value, of type t)."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"None")," represents the absence of a value. The None constructor takes no arguments."),(0,i.kt)("h3",{id:"example-contract"},"Example Contract"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ocaml"},'scilla_version 0\n(************************************************************************)\n(* Scilla\'s Option type: a type that either is "empty" ("None") or has  *)\n(* a Uint32 ("Some {Uint32}")                                           *)\n(* How to i) create (with and without value), (ii) to extract the value *)\n(* and iii) do different things depending if the Option is empty or not *)\n(************************************************************************)\nlibrary Option\n\nlet empty_option = None {Uint32}\n\ncontract Option\n()\n\n(* mutable fields declarations *)\nfield opt : Option Uint32 = empty_option\n\n(* give the option a value *)\ntransition SetTo(v: Uint32)\n  o = Some {Uint32} v;\n  opt := o\nend\n\n(* remove the value in the option *)\ntransition Clear()\n  o = empty_option;\n  opt := o\nend\n\n(* extract the value (if any) and emit *)\ntransition Emit()\n  o <- opt;\n  match o with (* depending on Option state, do different things *)\n  | None =>\n    ev = {_eventname: "EmitNone"};\n    event ev\n  | Some v =>\n    ev = {_eventname: "EmitValue"; value: v};\n    event ev\n  end\nend\n')),(0,i.kt)("h2",{id:"further-reading"},"Further Reading"))}m.isMDXComponent=!0}}]);