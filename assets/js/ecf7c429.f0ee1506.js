"use strict";(self.webpackChunkdocu_scilla=self.webpackChunkdocu_scilla||[]).push([[5169],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function c(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var l=a.createContext({}),s=function(t){var e=a.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):c(c({},e),t)),n},u=function(t){var e=s(t.components);return a.createElement(l.Provider,{value:e},t.children)},p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},f=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,l=t.parentName,u=i(t,["components","mdxType","originalType","parentName"]),f=s(n),m=r,d=f["".concat(l,".").concat(m)]||f[m]||p[m]||o;return n?a.createElement(d,c(c({ref:e},u),{},{components:n})):a.createElement(d,c({ref:e},u))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,c=new Array(o);c[0]=f;var i={};for(var l in e)hasOwnProperty.call(e,l)&&(i[l]=e[l]);i.originalType=t,i.mdxType="string"==typeof t?t:r,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3017:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return f}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),c=["components"],i={sidebar_position:3},l="Contract State",s={unversionedId:"tutorials/contract-interaction/incrementing-button-interaction/contract-state",id:"tutorials/contract-interaction/incrementing-button-interaction/contract-state",isDocsHomePage:!1,title:"Contract State",description:"Review the javascript that defines queryState.js",source:"@site/docs/tutorials/contract-interaction/incrementing-button-interaction/contract-state.md",sourceDirName:"tutorials/contract-interaction/incrementing-button-interaction",slug:"/tutorials/contract-interaction/incrementing-button-interaction/contract-state",permalink:"/tutorials/contract-interaction/incrementing-button-interaction/contract-state",editUrl:"https://github.com/Zilliqa/Scilla-Cookbook/tree/master/docs/tutorials/contract-interaction/incrementing-button-interaction/contract-state.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Calling a Contract",permalink:"/tutorials/contract-interaction/incrementing-button-interaction/call-contract"}},u=[{value:"Retrieve a contracts state",id:"retrieve-a-contracts-state",children:[]}],p={toc:u};function f(t){var e=t.components,i=(0,r.Z)(t,c);return(0,o.kt)("wrapper",(0,a.Z)({},p,i,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"contract-state"},"Contract State"),(0,o.kt)("p",null,"Review the javascript that defines ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Zilliqa/Zilliqa-JavaScript-Library-Examples/blob/master/node/queryState.js"},"queryState.js")),(0,o.kt)("h2",{id:"retrieve-a-contracts-state"},"Retrieve a contracts state"),(0,o.kt)("p",null,"Now we have a contract deployed to testnet, and a script to be able to call the button for a given address. We now want to get the state of our contract to do some processing on a backend service. The contract state currently says our state for ",(0,o.kt)("inlineCode",{parentName:"p"},"total_button_clicks")," is the value ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),", but we need to pull that value into the backend."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Docusaurus",src:n(9332).Z})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const { Zilliqa } = require('@zilliqa-js/zilliqa');\nconst zilliqa = new Zilliqa('https://dev-api.zilliqa.com'); // network\n\nconst button_contract = 'fc5a92e656ec6ef16fddaf8f53902a9fff997ae1'; // omit 0x\n\nasync function GetState() {\n  const contract = zilliqa.contracts.at(button_contract);\n\n  // get everything in the state field\n  // not as performant as retrieving a specific map entry or an individual state\n  const allState = await contract.getState(); \n  console.log(allState);\n\n  // get immutable parameters\n  const initState = await contract.getInit();\n  console.log(initState);\n\n  // get a specific state field\n  const state2 = await contract.getSubState('_balance');\n  console.log(state2);\n\n  // get a specific entry in a map.\n  const state3 = await contract.getSubState('balances', [\n    '0x381f4008505e940ad7681ec3468a719060caf796',\n  ]);\n  console.log(state3);\n\n}\n\nGetState();\n")),(0,o.kt)("p",null,"For our example we can simplify this to just retrieve the state field ",(0,o.kt)("inlineCode",{parentName:"p"},"total_button_clicks"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"}," const { Zilliqa } = require('@zilliqa-js/zilliqa');\n const zilliqa = new Zilliqa('https://dev-api.zilliqa.com');\n const button_contract = 'fc5a92e656ec6ef16fddaf8f53902a9fff997ae1'; // omit 0x\n \n async function GetState(){\n   const contract = zilliqa.contracts.at(button_contract);\n  \n   console.log(`\\n\\nGetting a particular field in the contract`);\n   const button_click_count_state = await contract.getSubState('total_count_clicks');\n   console.log(button_click_count_state);\n }\n \n GetState();\n")),(0,o.kt)("p",null,"The console, after waiting for the async call to be returned should reply with."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ GetButtonState.js\nGetting a particular field in the contract\n{ total_count_clicks: '1' }\n")))}f.isMDXComponent=!0},9332:function(t,e,n){e.Z=n.p+"assets/images/IDE-state-97b960abc4aae07575633e588feae80b.png"}}]);